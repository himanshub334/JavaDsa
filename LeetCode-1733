class Solution {
    public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
        List<Set<Integer>> langs = new ArrayList<>();
        for (int[] langList : languages) {
            Set<Integer> set = new HashSet<>();
            for (int l : langList) set.add(l);
            langs.add(set);
        }
        Set<Integer> problemPeople = new HashSet<>();
        for (int[] f : friendships) {
            int u = f[0] - 1;
            int v = f[1] - 1;
            if (Collections.disjoint(langs.get(u), langs.get(v))) {
                problemPeople.add(u);
                problemPeople.add(v);
            }
        }
        if (problemPeople.isEmpty()) return 0;
        int minTeach = Integer.MAX_VALUE;
        for (int lang = 1; lang <= n; lang++) {
            int knowsLang = 0;
            for (int person : problemPeople) {
                if (langs.get(person).contains(lang)) {
                    knowsLang++;
                }
            }
            int needToTeach = problemPeople.size() - knowsLang;
            minTeach = Math.min(minTeach, needToTeach);
        }

        return minTeach;
    }
}
